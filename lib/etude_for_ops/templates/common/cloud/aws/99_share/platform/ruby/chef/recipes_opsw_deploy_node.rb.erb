# frozen_string_literal: true

deploy_action = :deploy
deploy_migration = true

node['app_name_short_bot'].each do |app_name|
  unless node['state'].nil?
    Chef::Log.info("********** The app's initial state is '#{node['state']}' **********")
    Chef::Log.info("********** The app's type is '#{node['type']}' **********")
    Chef::Log.info("********** The deploy app's name is '#{node['app_name_short']}' **********")
    Chef::Log.info("********** The deploy app's action is '#{node['deploy']['action']}' **********")
    Chef::Log.info("********** The deploy app's migration is '#{node['deploy']['migrate']}' **********")

    deploy_action = node['deploy']['action'].to_sym
    deploy_migration = node['deploy']['migrate']
  else
    Chef::Log.info("********** The app's initial state is default check your custome JSON **********")
    Chef::Log.info("********** The app's type is bot **********")
    Chef::Log.info("********** The deploy app's name is '#{node['app_name_short']}' **********")
    Chef::Log.info("********** The deploy app's action is '#{deploy_action}' **********")
    Chef::Log.info("********** The deploy app's migration is '#{deploy_migration}' **********")
  end

  user = node['ec2_user']
  group = node['ec2_group']
  app = search(:aws_opsworks_app, "shortname:#{app_name}").first
  app_path = "/srv/#{app['shortname']}"
  domains = app['domains'] || []

  packages = %w[]
  packages.each do |package_name|
    package package_name do
      action :install
    end
  end

  directory app_path do
    owner user
    group group
    action :create
  end

  file "/home/#{user}/.ssh/repository_rsa" do
    content app['app_source']['ssh_key']
    mode '0600'
    owner user
    group group
  end

  cookbook_file "#{app_path}/wrap-ssh4git.sh" do
    source 'wrap-ssh4git.sh'
    owner user
    mode '0755'
  end

  enable_ssl = app['enable_ssl'] || node['enable_ssl']
  if enable_ssl
    directory '/etc/nginx/ssl' do
      action :create
    end

    file "/etc/nginx/ssl/#{app['shortname']}_ssl_certificate.crt" do
      content app['ssl_configuration']['certificate']
    end

    file "/etc/nginx/ssl/#{app['shortname']}_ssl_certificate.pem" do
      content app['ssl_configuration']['private_key']
    end
  end


  deploy_branch app_path do
    user user
    group group

    repo app['app_source']['url']
    branch app['app_source']['revision']
    ssh_wrapper "#{app_path}/wrap-ssh4git.sh"
    action deploy_action
    migrate deploy_migration

    environment app['environment']['NODE_ENV']

    migration_command "yarn run prod:build"

    symlink_before_migrate.clear
    create_dirs_before_symlink.clear
    purge_before_symlink.clear
    symlinks.clear

    symlink_before_migrate(
        {
            'node_modules' => 'node_modules',
            'process.json' => 'process.json'
        }
    )

    before_migrate do
      %w[config pids sockets log public localsystem node_modules].each do |dir|
        directory ::File.join(release_path, '../../shared', dir) do
          action :create
        end
      end
      %w[assets system].each do |dir|
        directory ::File.join(release_path, '../../shared/public', dir) do
          action :create
        end
      end

      template ::File.expand_path(::File.join(release_path, '../../shared/process.json')) do
        cookbook 'ruby_platform'
        source 'bot_process.json.erb'
        variables(
            name: app['shortname'],
            cwd: "/srv/#{app['shortname']}/current",
            args: ["-n", "hubot", "-a", "slack"],
            script: "bin/hubot.sh",
            node_env: app['environment']['NODE_ENV'],
            hubot_slack_tocken: app['environment']['HUBOT_SLACK_TOKEN'],
            port: app['environment']['PORT']
        )
      end

      execute 'install' do
        user user
        group group
        cwd release_path
        command <<-EOC
           yarn install
        EOC
        action :run
      end
    end

    before_restart do
      server = "#{app['environment']['HOST']}:#{app['environment']['PORT']}"
      template "/etc/nginx/conf.d/#{app['shortname']}.conf" do
        source 'nginx.app.conf.erb'
        mode '0644'

        variables({
                      :app => app['shortname'],
                      :server => server
                  })
      end

      domains.each do |domain|
        template "/etc/nginx/conf.d/#{app['shortname']}_#{domain}.conf" do
          source 'nginx.ec2.conf.erb'
          mode '0644'

          variables({
                        :app => app['shortname'],
                        :server_name => domain,
                        :enable_ssl => enable_ssl
                    })
        end
      end

      service "nginx" do
        action :restart
      end

      execute 'node application' do
        user user
        group group
        cwd release_path
        command <<-EOC
           sudo yarn run prod:stop
           sudo yarn run prod:start
        EOC
        action :run
      end
    end
  end
end
