### インフラのセットアップ

```bash
cd ops/01_development
vagrant up
vagrant ssh
```

```bash
cd /vagrant
./src/build/sh/build.sh
source ~/.bash_profile
exit
vagrant reload
```

```bash
cd /vagrant/build
sudo chef-client -z -j provision.json
```

#### EC2キーペアの作成
```bash
cd /vagrant/config/secure/
../../src/build/aws/ec2/create_key_pare.sh
```
再作成をする場合は以下のコマンドで秘密鍵を削除してからコピーする
```bash
rm  ~/.ssh/$DEV_SSH_KEY
cp $DEV_SSH_KEY  ~/.ssh/
chmod 0400 ~/.ssh/$DEV_SSH_KEY
```

#### VPCの作成
```bash
cd /vagrant/src/build/aws/vpc/
aws cloudformation validate-template --template-body file://$DEV_VPC_TEMPLATE
chmod 0755 ./create_stack.sh
./create_stack.sh
aws cloudformation list-stack-resources --stack-name $DEV_VPC_STACKNAME --output table
```

#### セキュリティグループを作成する
```bash
cd /vagrant/src/build/aws/ec2/
./create_security_group.sh
```
作成されたセキュリティグループIDを環境変数に設定して環境変数を読み込み直した後に以下のコマンドを実行する
```bash
./configure_security_group_rule.sh
```

#### 仮想マシンセットアップ(Vagrant版)
```bash
cd /vagrant/build
vagrant up --provider=aws
vagrant ssh
cd /vagrant
sudo chef-client -z -j ec2_provision.json
sudo reboot
```
起動完了後にインスタンスIDを環境変数に登録する
```bash
DEV_EC2_INSTANCE_ID=`cat .vagrant/machines/default/aws/id | sed  "s/$//g"`
echo $DEV_EC2_INSTANCE_ID
```
パブリックIPを登録する
```bash
DEV_EC2_PUBLIC_IP=`aws ec2  describe-instances --instance-ids ${DEV_EC2_INSTANCE_ID} | grep PublicIpAddress | awk {'print $2 '} | sed s/,//g | sed s/\"//g`
echo $DEV_EC2_PUBLIC_IP
```
リソース名を統一する
```bash
cd /vagrant/src/build/aws/ec2/
./configure_resources.sh
```

#### 仮想マシンセットアップ(コマンドライン版)
```bash
cd /vagrant/src/build/aws/ec2/
./create_instance.sh
```
実行後に表示されるインスタンスIDを環境変数に登録する
```
インスタンスのパブリックIPアドレスを環境変数に登録する
```bash
export DEV_EC2_INSTANCE_ID=xxxxxx
```
```bash
DEV_EC2_PUBLIC_IP=`aws ec2  describe-instances --instance-ids ${DEV_EC2_INSTANCE_ID} | grep PublicIpAddress | awk {'print $2 '} | sed s/,//g | sed s/\"//g`
echo $DEV_EC2_PUBLIC_IP
```
リソース名を統一する
```bash
cd /vagrant/src/build/aws/ec2/
./configure_resources.sh
```

仮想マシンへのログイン
```
ssh -i ~/.ssh/dev-app.pem ec2-user@$DEV_EC2_PUBLIC_IP
```

#### アプリケーション・サーバのプロビジョニング
セットアップ
```bash
cd /vagrant/build
gem install bundler
bundle install --path vendor/bundler
export server=$DEV_EC2_PUBLIC_IP
ssh -i ~/.ssh/$DEV_SSH_KEY ec2-user@$server
exit
mkdir .chef
echo 'local_mode true' > .chef/knife.rb
bundle exec knife zero bootstrap $server -x ec2-user -i ~/.ssh/$DEV_SSH_KEY --hint ec2 --sudo
bundle exec knife node list
export node=ip-x-x-x-x.ec2.internal
bundle exec knife node show $node
bundle exec knife node run_list add $node ruby_platform::ec2
bundle exec knife zero converge "name:$node" --attribute ec2.public_ipv4 -x ec2-user -i ~/.ssh/$DEV_SSH_KEY --sudo --client-version 12.21.1
```
クックブック更新時のプロビジョニング実行
```bash
./reprovision.sh
ssh -i ~/.ssh/dev-app.pem ec2-user@$DEV_EC2_PUBLIC_IP
sudo /etc/init.d/nginx restart
```

再プロビジョニング
```bash
cd /vagrant/build
./reprovision.sh
```

インスタンスの起動と停止
```bash
aws ec2 start-instances --instance-ids ${DEV_EC2_INSTANCE_ID}
aws ec2 stop-instances --instance-ids ${DEV_EC2_INSTANCE_ID}
```

### RDSのセットアップ
```bash
cd /vagrant/src/build/aws/rds/
aws cloudformation validate-template --template-body file://$DEV_RDS_TEMPLATE
chmod 0755 ./create_stack.sh
./create_stack.sh
aws cloudformation list-stack-resources --stack-name $DEV_RDS_STACKNAME --output table
```
インスタンスの起動と停止
```bash
aws rds start-db-instance --db-instance-identifier $DEV_RDS_DB_INSTANCE_NAME
aws rds stop-db-instance --db-instance-identifier $DEV_RDS_DB_INSTANCE_NAME
```

### アプリケーションのセットアップ
```bash
sudo gem install bundler
sudo gem install rails
rails new . -d mysql
```